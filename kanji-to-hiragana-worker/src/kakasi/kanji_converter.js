// This file is automatically generated using node-codegen. DO NOT EDIT.
"use strict";
/**
 * Convert a compound kanji string to its reading using the generated kanji dictionary.
 * This implements advanced (redundant compound) detection logic.
 * @param {string} text - The input text starting with kanji.
 * @param {Object} kanjiDict - The dictionary mapping (generated in kanji_dict.js).
 * @param {string} [baseText=""] - (Optional) base text context (unused in this implementation).
 * @returns {{ reading: string, count: number }}
 */
function convertKanjiCompound(text, kanjiDict, baseText = "") {
  let finalReading = "";
  let finalCount = 0;
  // Iterate over all possible prefixes (greedy matching)
  for (let i = 0; i < text.length; i++) {
    let prefix = text.slice(0, i + 1);
    if (Object.prototype.hasOwnProperty.call(kanjiDict, prefix)) {
      let mapping = kanjiDict[prefix];
      // Default candidate reading from the empty key.
      let candidate = mapping[""] || null;
      let candidateCount = i + 1;
      // If the next character exists, check for a tail mapping.
      if (i + 1 < text.length) {
        let nextChar = text[i + 1];
        for (let key in mapping) {
          if (key !== "" && key.length === 1 && Object.prototype.hasOwnProperty.call(CLETTERS, key)) {
            if (CLETTERS[key].includes(nextChar)) {
              candidate = mapping[key] + nextChar;
              candidateCount = i + 2;
              break;
            }
          }
        }
      }
      if (candidate !== null) {
        finalReading = candidate;
        finalCount = candidateCount;
      }
    } else {
      break;
    }
  }
  return { reading: finalReading, count: finalCount };
}

const CLETTERS = {
  "a": [
    "あ",
    "ぁ",
    "っ",
    "わ",
    "ゎ"
  ],
  "i": [
    "い",
    "ぃ",
    "っ",
    "ゐ"
  ],
  "u": [
    "う",
    "ぅ",
    "っ"
  ],
  "e": [
    "え",
    "ぇ",
    "っ",
    "ゑ"
  ],
  "o": [
    "お",
    "ぉ",
    "っ"
  ],
  "k": [
    "か",
    "ゕ",
    "き",
    "く",
    "け",
    "ゖ",
    "こ",
    "っ"
  ],
  "g": [
    "が",
    "ぎ",
    "ぐ",
    "げ",
    "ご",
    "っ"
  ],
  "s": [
    "さ",
    "し",
    "す",
    "せ",
    "そ",
    "っ"
  ],
  "z": [
    "ざ",
    "じ",
    "ず",
    "ぜ",
    "ぞ",
    "っ"
  ],
  "t": [
    "た",
    "ち",
    "つ",
    "て",
    "と",
    "っ"
  ],
  "d": [
    "だ",
    "ぢ",
    "づ",
    "で",
    "ど",
    "っ"
  ],
  "c": [
    "ち",
    "っ"
  ],
  "n": [
    "な",
    "に",
    "ぬ",
    "ね",
    "の",
    "ん"
  ],
  "h": [
    "は",
    "ひ",
    "ふ",
    "へ",
    "ほ",
    "っ"
  ],
  "b": [
    "ば",
    "び",
    "ぶ",
    "べ",
    "ぼ",
    "っ"
  ],
  "f": [
    "ふ",
    "っ"
  ],
  "p": [
    "ぱ",
    "ぴ",
    "ぷ",
    "ぺ",
    "ぽ",
    "っ"
  ],
  "m": [
    "ま",
    "み",
    "む",
    "め",
    "も"
  ],
  "y": [
    "や",
    "ゃ",
    "ゆ",
    "ゅ",
    "よ",
    "ょ"
  ],
  "r": [
    "ら",
    "り",
    "る",
    "れ",
    "ろ"
  ],
  "w": [
    "わ",
    "ゐ",
    "ゑ",
    "ゎ",
    "を",
    "っ"
  ],
  "v": [
    "ゔ"
  ]
};

module.exports = {
  convertKanjiCompound
};
